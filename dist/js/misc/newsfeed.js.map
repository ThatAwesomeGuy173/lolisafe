{"version":3,"sources":["newsfeed.js"],"names":["const","newsfeed","lsKey","feedUrl","maxItems","dismissed","done","simpleParseDate","string","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","match","undefined","date","Date","setUTCDate","setUTCMonth","setUTCFullYear","setUTCHours","setUTCMinutes","setUTCSeconds","formatRelativeDate","delta","fuzzy","unit","hour","minute","day","week","Math","floor","formatNotification","item","parsedDate","pubDate","dateDelta","round","isRecentWeek","element","document","createElement","dataset","identifier","className","href","link","target","innerHTML","title","description","slice","toLocaleString","dismissNotification","parentNode","removeChild","keys","Object","length","let","i","localStorage","JSON","stringify","do","axios","get","responseType","then","response","data","documentElement","Element","Error","items","querySelectorAll","parse","id","column","querySelector","min","titleElement","descriptionElement","pubDateElement","linkElement","textContent","notificationElement","dismissTrigger","addEventListener","event","preventDefault","appendChild","body","catch","console","error","onloaded","page","apiChecked","readyState","window"],"mappings":"AAEAA,IAAMC,SAAW,CACfC,MAAO,WACPC,QAAS,yCACTC,SAAU,EACVC,UAAW,GACXC,MAAM,EAGRC,gBAAwB,SAAGC,GAKzBR,IAAMS,EAAS,CAAEC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GAAIC,IAAK,IACzGC,EAAQd,EAAOc,MAAM,6EAC3B,GAAIA,QAA+BC,IAArBd,EAAOa,EAAM,IAAoB,CAC7CtB,IAAMwB,EAAO,IAAIC,KAOjB,OANAD,EAAKE,WAAWJ,EAAM,IACtBE,EAAKG,YAAYlB,EAAOa,EAAM,KAC9BE,EAAKI,eAAeN,EAAM,IAC1BE,EAAKK,YAAYP,EAAM,IACvBE,EAAKM,cAAcR,EAAM,IACzBE,EAAKO,cAAcT,EAAM,IAClBE,IAIXQ,mBAA2B,SAAGC,GAE5BjC,IAKIkC,EACAC,EALEC,EAAOC,KACPC,EAAMF,MACNG,EAAa,EAAND,EAqBb,OAjBIL,EAPW,IAQbC,EAAQD,EACRE,EAAO,UACEF,EAAQG,GACjBF,EAAQM,KAAKC,MAAMR,EAXN,IAYbE,EAAO,UACEF,EAAQK,GACjBJ,EAAQM,KAAKC,MAAMR,EAAQG,GAC3BD,EAAO,QACEF,EAAQM,GACjBL,EAAQM,KAAKC,MAAMR,EAAQK,GAC3BH,EAAO,QAEPD,EAAQM,KAAKC,MAAMR,EAAQM,GAC3BJ,EAAO,QAGCD,EAAK,IAAIC,GAAiB,IAAVD,EAAc,IAAM,IAAE,QAGlDQ,mBAA2B,SAAGC,GAC5B3C,IAAM4C,EAAa3C,SAASM,gBAAgBoC,EAAKE,SAC3CC,EAAYN,KAAKO,QAAQ,IAAItB,KAASmB,GAAc,KACpDI,EAAeF,GAAa,OAE5BG,EAAUC,SAASC,cAAc,KAqBvC,OApBAF,EAAQG,QAAQC,WAAaV,EAAKU,WAClCJ,EAAQK,UAAY,uBACpBL,EAAQM,KAAOZ,EAAKa,KACpBP,EAAQQ,OAAS,SACjBR,EAAQS,UAAY,+HAIZf,EAAKgB,OAAS,YAAU,8DAGxBhB,EAAKiB,YACH,IAAkC,MAA/BjB,EAAKiB,YAAYC,OAAO,GAAgBlB,EAAKiB,YAAYC,MAAM,GAAI,GAAE,OAASlB,EAAKiB,aACtF,OAAK,+CAEYZ,EAAe,kBAAoB,IAAE,4BAC3CJ,EAAWkB,iBAAgB,KAAK7D,SAAS+B,mBAAmBc,GAAU,uCAIpFG,GAGTc,oBAA4B,SAAGd,GAC7B,GAAKA,GAAYA,EAAQG,QAAQC,WAAjC,CAEApD,SAASI,UAAU4C,EAAQG,QAAQC,YAAc,EACjDJ,EAAQe,WAAWC,YAAYhB,GAE/BjD,IAAMkE,EAAOC,OAAOD,KAAKjE,SAASI,WAClC,GAAI6D,EAAKE,OAASnE,SAASG,SACzB,IAAKiE,IAAIC,EAAI,EAAGA,EAAIJ,EAAKE,OAASnE,SAASG,SAAUkE,WAC5CrE,SAASI,UAAU6D,EAAKI,IAInCC,aAAatE,SAASC,OAASsE,KAAKC,UAAUxE,SAASI,aAGzDqE,GAAW,WACT,OAAOC,MAAMC,IAAI3E,SAASE,QAAS,CACjC0E,aAAc,aACbC,MAAI,SAACC,GACN,KAAIA,GAAYA,EAASC,MAAQD,EAASC,KAAKC,2BAA2BC,SAsDxE,MAAMC,MAAM,+DArDZnF,IAAMoF,EAAQL,EAASC,KAAKC,gBAAgBI,iBAAiB,QAE7D,GAAID,EAAMhB,OAAQ,CAChBpE,IAAMK,EAAYkE,aAAatE,SAASC,OACpCG,IACFJ,SAASI,UAAYmE,KAAKc,MAAMjF,IAGlCL,IAAMiD,EAAUC,SAASC,cAAc,WACvCF,EAAQsC,GAAK,WACbtC,EAAQK,UAAY,UACpBL,EAAQS,UAAY,oPASpB,IAFA1D,IAAMwF,EAASvC,EAAQwC,cAAc,iCAE5BnB,EAAI,EAAGA,EAAI9B,KAAKkD,IAAIzF,SAASG,SAAUgF,EAAMhB,QAASE,IAAK,CAClEtE,IAAM2F,EAAeP,EAAMd,GAAGmB,cAAc,SACtCG,EAAqBR,EAAMd,GAAGmB,cAAc,eAC5CI,EAAiBT,EAAMd,GAAGmB,cAAc,WACxCK,EAAcV,EAAMd,GAAGmB,cAAc,QAErC9B,EAAQgC,EAAeA,EAAaI,YAAc,GAClDnC,EAAcgC,EAAqBA,EAAmBG,YAAc,GACpElD,EAAUgD,EAAiBA,EAAeE,YAAc,GACxDvC,EAAOsC,EAAcA,EAAYC,YAAc,GAE/C1C,EAAaM,EAAQ,IAAMC,EAAc,IAAMf,EAAU,IAAMW,EAErE,IAAKvD,SAASI,UAAUgD,GAAa,CACnCrD,IAAMgG,EAAsB/F,SAASyC,mBAAmB,CAlBtDiB,MAmBAA,EAAKC,YAAEA,EAAWf,QAAEA,EAAOW,KAAEA,EAAIH,WAAEA,IAG/B4C,EAAiBD,EAAoBP,cAAc,WACrDQ,GACFA,EAAeC,iBAAiB,SAAS,WACvCC,MAAMC,iBACNnG,SAAS8D,oBAAoBoC,MAAM1C,OAAOO,eAI9CwB,EAAOa,YAAYL,IAIvB9C,SAASoD,KAAKD,YAAYpD,OAK7BsD,MAAMC,QAAQC,QAGnBC,SAAiB,WAGK,oBAATC,MAAwBA,KAAKC,aAAe3G,SAASK,MAC9DL,SAASyE,OAIe,gBAAxBxB,SAAS2D,YAAwD,aAAxB3D,SAAS2D,WACpD5G,SAASyG,WAETI,OAAOZ,iBAAiB,oBAAkB,WAAK,OAAGjG,SAASyG","file":"newsfeed.js","sourcesContent":["/* global page, axios */\n\nconst newsfeed = {\n  lsKey: 'newsfeed',\n  feedUrl: 'https://blog.fiery.me/rss-newsfeed.xml',\n  maxItems: 3,\n  dismissed: {},\n  done: false\n}\n\nnewsfeed.simpleParseDate = string => {\n  // For now limited to support the following examples (used in blog.fiery.me):\n  // Mon, 27 Jul 2020 18:30:00 GMT\n  // Sat, 16 May 2020 14:55:00 GMT\n  // Probably better to use a library if it needs to support other formats.\n  const months = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 }\n  const match = string.match(/[a-zA-Z]*,\\s(\\d{2})\\s([a-zA-Z]{3})\\s(\\d{4})\\s(\\d{2}):(\\d{2}):(\\d{2})\\sGMT/)\n  if (match && (months[match[2]] !== undefined)) {\n    const date = new Date()\n    date.setUTCDate(match[1])\n    date.setUTCMonth(months[match[2]])\n    date.setUTCFullYear(match[3])\n    date.setUTCHours(match[4])\n    date.setUTCMinutes(match[5])\n    date.setUTCSeconds(match[6])\n    return date\n  }\n}\n\nnewsfeed.formatRelativeDate = delta => {\n  // https://stackoverflow.com/a/7641812\n  const minute = 60\n  const hour = minute * 60\n  const day = hour * 24\n  const week = day * 7\n\n  let fuzzy\n  let unit\n  if (delta < minute) {\n    fuzzy = delta\n    unit = 'second'\n  } else if (delta < hour) {\n    fuzzy = Math.floor(delta / minute)\n    unit = 'minute'\n  } else if (delta < day) {\n    fuzzy = Math.floor(delta / hour)\n    unit = 'hour'\n  } else if (delta < week) {\n    fuzzy = Math.floor(delta / day)\n    unit = 'day'\n  } else {\n    fuzzy = Math.floor(delta / week)\n    unit = 'week'\n  }\n\n  return `${fuzzy} ${unit}${fuzzy !== 1 ? 's' : ''} ago`\n}\n\nnewsfeed.formatNotification = item => {\n  const parsedDate = newsfeed.simpleParseDate(item.pubDate)\n  const dateDelta = Math.round((+new Date() - parsedDate) / 1000)\n  const isRecentWeek = dateDelta <= 604800\n\n  const element = document.createElement('a')\n  element.dataset.identifier = item.identifier\n  element.className = 'notification is-info'\n  element.href = item.link\n  element.target = '_blank'\n  element.innerHTML = `\n    <button class=\"delete\" title=\"Dismiss\"></button>\n    <div class=\"content\">\n      <div class=\"news-title\">\n        ${item.title || 'Untitled'}\n      </div>\n      <div class=\"news-excerpt\">\n        ${item.description\n          ? `${item.description.slice(-1) === '…' ? `${item.description.slice(0, -1)} […]` : item.description}`\n          : 'N/A'}\n      </div>\n      <div class=\"news-date${isRecentWeek ? ' is-recent-week' : ''}\">\n        <span title=\"${parsedDate.toLocaleString()}\">${newsfeed.formatRelativeDate(dateDelta)}</span>\n      </div>\n    <div>\n  `\n  return element\n}\n\nnewsfeed.dismissNotification = element => {\n  if (!element || !element.dataset.identifier) return\n\n  newsfeed.dismissed[element.dataset.identifier] = 1\n  element.parentNode.removeChild(element)\n\n  const keys = Object.keys(newsfeed.dismissed)\n  if (keys.length > newsfeed.maxItems) {\n    for (let i = 0; i < keys.length - newsfeed.maxItems; i++) {\n      delete newsfeed.dismissed[keys[i]]\n    }\n  }\n\n  localStorage[newsfeed.lsKey] = JSON.stringify(newsfeed.dismissed)\n}\n\nnewsfeed.do = () => {\n  return axios.get(newsfeed.feedUrl, {\n    responseType: 'document'\n  }).then(response => {\n    if (response && response.data && response.data.documentElement instanceof Element) {\n      const items = response.data.documentElement.querySelectorAll('item')\n\n      if (items.length) {\n        const dismissed = localStorage[newsfeed.lsKey]\n        if (dismissed) {\n          newsfeed.dismissed = JSON.parse(dismissed)\n        }\n\n        const element = document.createElement('section')\n        element.id = 'newsfeed'\n        element.className = 'section'\n        element.innerHTML = `\n          <div class=\"columns is-gapless\">\n            <div class=\"column is-hidden-mobile\"></div>\n            <div class=\"column is-hidden-mobile\"></div>\n            <div class=\"column has-text-right\"></div>\n          </div>\n        `\n        const column = element.querySelector('.columns > .column:last-child')\n\n        for (let i = 0; i < Math.min(newsfeed.maxItems, items.length); i++) {\n          const titleElement = items[i].querySelector('title')\n          const descriptionElement = items[i].querySelector('description')\n          const pubDateElement = items[i].querySelector('pubDate')\n          const linkElement = items[i].querySelector('link')\n\n          const title = titleElement ? titleElement.textContent : ''\n          const description = descriptionElement ? descriptionElement.textContent : ''\n          const pubDate = pubDateElement ? pubDateElement.textContent : ''\n          const link = linkElement ? linkElement.textContent : ''\n\n          const identifier = title + '|' + description + '|' + pubDate + '|' + link\n\n          if (!newsfeed.dismissed[identifier]) {\n            const notificationElement = newsfeed.formatNotification({\n              title, description, pubDate, link, identifier\n            })\n\n            const dismissTrigger = notificationElement.querySelector('.delete')\n            if (dismissTrigger) {\n              dismissTrigger.addEventListener('click', function () {\n                event.preventDefault()\n                newsfeed.dismissNotification(event.target.parentNode)\n              })\n            }\n\n            column.appendChild(notificationElement)\n          }\n        }\n\n        document.body.appendChild(element)\n      }\n    } else {\n      throw Error('response.data.documentElement is NOT an instance of Element')\n    }\n  }).catch(console.error)\n}\n\nnewsfeed.onloaded = () => {\n  // If the main script had already done its API check, yet newsfeed haven't been triggered, do it\n  // This would only happen if this newsfeed script only gets loaded after the main script's API check\n  if (typeof page !== 'undefined' && page.apiChecked && !newsfeed.done) {\n    newsfeed.do()\n  }\n}\n\nif (document.readyState === 'interactive' || document.readyState === 'complete') {\n  newsfeed.onloaded()\n} else {\n  window.addEventListener('DOMContentLoaded', () => newsfeed.onloaded())\n}\n"]}